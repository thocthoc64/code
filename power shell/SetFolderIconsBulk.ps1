# ===========================================
# SCRIPT T·∫†O FOLDER ICON H√ÄNG LO·∫†T CHO NHI·ªÄU TH∆Ø M·ª§C G·ªêC
# L·ªánh trong PowerShell: Set-ExecutionPolicy -Scope Process -ExecutionPolicy Bypass (b·∫≠t quy·ªÅn cho ph√©p ch·∫°y m√£ tr√™n h·ªá th·ªëng)
# ===========================================

param(
    [string[]]$RootFolders = @(),
    [string]$IconFolder = "",
    [switch]$ShowProgress = $true,
    [switch]$Interactive = $false
)

# C·∫•u h√¨nh m·∫∑c ƒë·ªãnh
$defaultRootFolders = @(
    "D:\AN THINH NAM\San_Pham\Antech",
	"D:\AN THINH NAM\San_Pham\AsiaMortar",
	"D:\AN THINH NAM\San_Pham\AsiaStar",
	"D:\AN THINH NAM\San_Pham\Bautek",
	"D:\AN THINH NAM\San_Pham\Bestmix",
	"D:\AN THINH NAM\San_Pham\Bitumax",
	"D:\AN THINH NAM\San_Pham\BituNil",
	"D:\AN THINH NAM\San_Pham\Bossil",
	"D:\AN THINH NAM\San_Pham\EuroPaint",
	"D:\AN THINH NAM\San_Pham\Fosroc",
	"D:\AN THINH NAM\San_Pham\Intoc",
	"D:\AN THINH NAM\San_Pham\Lemax",
	"D:\AN THINH NAM\San_Pham\Mapei",
	"D:\AN THINH NAM\San_Pham\Modern",
	"D:\AN THINH NAM\San_Pham\Neomax",
	"D:\AN THINH NAM\San_Pham\Neotex",
	"D:\AN THINH NAM\San_Pham\Quicseal",
	"D:\AN THINH NAM\San_Pham\Shell",
	"D:\AN THINH NAM\San_Pham\SieuThiChongTham",
	"D:\AN THINH NAM\San_Pham\Sika",
	"D:\AN THINH NAM\San_Pham\Technonicol",
	"D:\AN THINH NAM\San_Pham\Victory"
    # Th√™m c√°c th∆∞ m·ª•c g·ªëc kh√°c v√†o ƒë√¢y
)

$defaultIconFolder = "D:\AN THINH NAM\HINH ANH - VIDEO\02. NOI DUNG DU AN\08. ICON\icons_1"

# S·ª≠ d·ª•ng gi√° tr·ªã m·∫∑c ƒë·ªãnh n·∫øu kh√¥ng ƒë∆∞·ª£c cung c·∫•p
if ($RootFolders.Count -eq 0) {
    $RootFolders = $defaultRootFolders
}

if (-not $IconFolder) {
    $IconFolder = $defaultIconFolder
}

# Function: T·∫°o ho·∫∑c c·∫≠p nh·∫≠t folder icon
function Set-FolderIcon {
    param(
        [string]$FolderPath,
        [string]$IconPath,
        [string]$FolderName,
        [bool]$IsNewFolder
    )
    
    try {
        $desktopIniPath = Join-Path $FolderPath "desktop.ini"
        
        # Ki·ªÉm tra v√† x·ª≠ l√Ω file desktop.ini hi·ªán c√≥
        if (Test-Path $desktopIniPath) {
            try {
                # X√≥a thu·ªôc t√≠nh b·∫£o v·ªá c·ªßa file c≈©
                attrib -h -r -s "$desktopIniPath" 2>$null
                Remove-Item -Path $desktopIniPath -Force -ErrorAction SilentlyContinue
                Write-Host "    üîÑ ƒê√£ x√≥a desktop.ini c≈©: $FolderName" -ForegroundColor Yellow
            }
            catch {
                Write-Host "    ‚ö† Kh√¥ng th·ªÉ x√≥a desktop.ini c≈©: $FolderName" -ForegroundColor Yellow
            }
        }
        
        # N·ªôi dung desktop.ini m·ªõi
        $desktopIniContent = @"
[.ShellClassInfo]
IconResource=$IconPath,0
"@
        
        # Th·ª≠ t·∫°o file desktop.ini m·ªõi
        try {
            # Ghi file v·ªõi quy·ªÅn cao nh·∫•t
            Set-Content -Path $desktopIniPath -Value $desktopIniContent -Encoding Unicode -Force
            
            # ƒê·∫∑t thu·ªôc t√≠nh cho folder v√† desktop.ini
            Start-Process -FilePath "attrib" -ArgumentList "+s `"$FolderPath`"" -NoNewWindow -Wait -ErrorAction SilentlyContinue
            Start-Process -FilePath "attrib" -ArgumentList "+h +r `"$desktopIniPath`"" -NoNewWindow -Wait -ErrorAction SilentlyContinue
            
            if ($IsNewFolder) {
                Write-Host "    ‚úî T·∫°o m·ªõi: $FolderName" -ForegroundColor Green
            } else {
                Write-Host "    ‚úî C·∫≠p nh·∫≠t: $FolderName" -ForegroundColor Cyan
            }
            
            return $true
        }
        catch {
            # N·∫øu v·∫´n l·ªói, th·ª≠ ph∆∞∆°ng ph√°p kh√°c
            Write-Host "    ‚ö† Th·ª≠ ph∆∞∆°ng ph√°p kh√°c cho: $FolderName" -ForegroundColor Yellow
            
            # T·∫°o file t·∫°m th·ªùi
            $tempFile = Join-Path $env:TEMP "desktop_temp.ini"
            Set-Content -Path $tempFile -Value $desktopIniContent -Encoding Unicode
            
            # Copy file t·∫°m th·ªùi v√†o th∆∞ m·ª•c ƒë√≠ch
            Copy-Item -Path $tempFile -Destination $desktopIniPath -Force
            Remove-Item -Path $tempFile -Force -ErrorAction SilentlyContinue
            
            # ƒê·∫∑t thu·ªôc t√≠nh
            Start-Process -FilePath "attrib" -ArgumentList "+s `"$FolderPath`"" -NoNewWindow -Wait -ErrorAction SilentlyContinue
            Start-Process -FilePath "attrib" -ArgumentList "+h +r `"$desktopIniPath`"" -NoNewWindow -Wait -ErrorAction SilentlyContinue
            
            Write-Host "    ‚úî Ph∆∞∆°ng ph√°p 2 th√†nh c√¥ng: $FolderName" -ForegroundColor Green
            return $true
        }
        
    }
    catch {
        Write-Host "    ‚úñ L·ªói quy·ªÅn truy c·∫≠p: $FolderName - $_" -ForegroundColor Red
        Write-Host "    üí° G·ª£i √Ω: Ch·∫°y PowerShell v·ªõi quy·ªÅn Administrator" -ForegroundColor Yellow
        return $false
    }
}

# Function: X·ª≠ l√Ω m·ªôt th∆∞ m·ª•c g·ªëc
function Process-RootFolder {
    param(
        [string]$RootPath,
        [array]$IconFiles,
        [int]$RootIndex,
        [int]$TotalRoots
    )
    
    Write-Host ""
    Write-Host "[$($RootIndex + 1)/$TotalRoots] üìÅ $RootPath" -ForegroundColor Yellow
    Write-Host "=" * 60 -ForegroundColor Gray
    
    # Ki·ªÉm tra v√† t·∫°o th∆∞ m·ª•c g·ªëc n·∫øu c·∫ßn
    if (-not (Test-Path $RootPath)) {
        Write-Host "  ‚ö† Th∆∞ m·ª•c kh√¥ng t·ªìn t·∫°i, ƒëang t·∫°o..." -ForegroundColor Yellow
        try {
            New-Item -Path $RootPath -ItemType Directory -Force | Out-Null
            Write-Host "  ‚úî ƒê√£ t·∫°o th∆∞ m·ª•c g·ªëc" -ForegroundColor Green
        }
        catch {
            Write-Host "  ‚úñ Kh√¥ng th·ªÉ t·∫°o th∆∞ m·ª•c g·ªëc: $_" -ForegroundColor Red
            return @{ New = 0; Updated = 0; Errors = 1 }
        }
    }
    
    # B·ªô ƒë·∫øm cho th∆∞ m·ª•c g·ªëc n√†y
    $stats = @{ New = 0; Updated = 0; Errors = 0 }
    
    # X·ª≠ l√Ω t·ª´ng file icon
    for ($i = 0; $i -lt $IconFiles.Count; $i++) {
        $iconFile = $IconFiles[$i]
        
        if ($ShowProgress) {
            $percentComplete = [math]::Round(($i / $IconFiles.Count) * 100, 1)
            Write-Progress -Id 1 -Activity "X·ª≠ l√Ω th∆∞ m·ª•c: $RootPath" -Status "($($i + 1)/$($IconFiles.Count)) $($iconFile.Name)" -PercentComplete $percentComplete
        }
        
        # L·∫•y t√™n folder t·ª´ t√™n file
        $folderName = $iconFile.BaseName
        $folderPath = Join-Path $RootPath $folderName
        
        # Ki·ªÉm tra folder c√≥ t·ªìn t·∫°i kh√¥ng
        $isNewFolder = $false
        if (-not (Test-Path $folderPath)) {
            try {
                New-Item -Path $folderPath -ItemType Directory | Out-Null
                $isNewFolder = $true
            }
            catch {
                Write-Host "    ‚úñ Kh√¥ng th·ªÉ t·∫°o: $folderName - $_" -ForegroundColor Red
                $stats.Errors++
                continue
            }
        }
        
        # T·∫°o ho·∫∑c c·∫≠p nh·∫≠t icon
        $success = Set-FolderIcon -FolderPath $folderPath -IconPath $iconFile.FullName -FolderName $folderName -IsNewFolder $isNewFolder
        
        if ($success) {
            if ($isNewFolder) {
                $stats.New++
            } else {
                $stats.Updated++
            }
        } else {
            $stats.Errors++
        }
    }
    
    # X√≥a progress bar cho th∆∞ m·ª•c n√†y
    if ($ShowProgress) {
        Write-Progress -Id 1 -Activity "X·ª≠ l√Ω th∆∞ m·ª•c: $RootPath" -Completed
    }
    
    # Hi·ªÉn th·ªã th·ªëng k√™ cho th∆∞ m·ª•c n√†y
    Write-Host ""
    Write-Host "  üìä K·∫øt qu·∫£ cho th∆∞ m·ª•c n√†y:" -ForegroundColor White
    Write-Host "    ‚úî T·∫°o m·ªõi: $($stats.New)" -ForegroundColor Green
    Write-Host "    ‚úî C·∫≠p nh·∫≠t: $($stats.Updated)" -ForegroundColor Cyan
    if ($stats.Errors -gt 0) {
        Write-Host "    ‚úñ L·ªói: $($stats.Errors)" -ForegroundColor Red
    }
    
    return $stats
}

# Function: Ch·ªçn th∆∞ m·ª•c g·ªëc t∆∞∆°ng t√°c
function Select-RootFolders {
    Write-Host ""
    Write-Host "=== CH·ªåN TH∆Ø M·ª§C G·ªêC ===" -ForegroundColor Cyan
    Write-Host "Danh s√°ch th∆∞ m·ª•c g·ªëc c√≥ s·∫µn:" -ForegroundColor White
    
    for ($i = 0; $i -lt $RootFolders.Count; $i++) {
        Write-Host "$($i + 1). $($RootFolders[$i])" -ForegroundColor Yellow
    }
    
    Write-Host "A. T·∫•t c·∫£ th∆∞ m·ª•c" -ForegroundColor Green
    Write-Host "C. T√πy ch·ªânh ƒë∆∞·ªùng d·∫´n m·ªõi" -ForegroundColor Magenta
    Write-Host ""
    
    $selection = Read-Host "Ch·ªçn th∆∞ m·ª•c (s·ªë, A cho t·∫•t c·∫£, C cho t√πy ch·ªânh)"
    
    if ($selection -eq "A" -or $selection -eq "a") {
        return $RootFolders
    }
    elseif ($selection -eq "C" -or $selection -eq "c") {
        $customPaths = @()
        do {
            $customPath = Read-Host "Nh·∫≠p ƒë∆∞·ªùng d·∫´n th∆∞ m·ª•c (Enter ƒë·ªÉ k·∫øt th√∫c)"
            if ($customPath -and $customPath.Trim() -ne "") {
                $customPaths += $customPath.Trim()
                Write-Host "‚úî ƒê√£ th√™m: $customPath" -ForegroundColor Green
            }
        } while ($customPath -and $customPath.Trim() -ne "")
        
        return $customPaths
    }
    else {
        try {
            $indices = $selection -split "," | ForEach-Object { [int]$_.Trim() - 1 }
            $selectedFolders = @()
            foreach ($index in $indices) {
                if ($index -ge 0 -and $index -lt $RootFolders.Count) {
                    $selectedFolders += $RootFolders[$index]
                }
            }
            
            if ($selectedFolders.Count -gt 0) {
                return $selectedFolders
            } else {
                Write-Host "L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!" -ForegroundColor Red
                return Select-RootFolders
            }
        }
        catch {
            Write-Host "Vui l√≤ng nh·∫≠p s·ªë h·ª£p l·ªá ho·∫∑c A/C!" -ForegroundColor Red
            return Select-RootFolders
        }
    }
}

# Function: Ki·ªÉm tra quy·ªÅn Administrator
function Test-Administrator {
    $currentUser = [Security.Principal.WindowsIdentity]::GetCurrent()
    $principal = New-Object Security.Principal.WindowsPrincipal($currentUser)
    return $principal.IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)
}

# Function: Y√™u c·∫ßu ch·∫°y v·ªõi quy·ªÅn Administrator
function Request-AdminRights {
    Write-Host ""
    Write-Host "‚ö†Ô∏è  C·∫¢NH B√ÅO: Kh√¥ng c√≥ quy·ªÅn Administrator!" -ForegroundColor Yellow
    Write-Host "M·ªôt s·ªë thao t√°c c√≥ th·ªÉ th·∫•t b·∫°i do h·∫°n ch·∫ø quy·ªÅn truy c·∫≠p." -ForegroundColor Yellow
    Write-Host ""
    Write-Host "üí° Khuy·∫øn ngh·ªã:" -ForegroundColor Cyan
    Write-Host "   1. ƒê√≥ng PowerShell hi·ªán t·∫°i" -ForegroundColor White
    Write-Host "   2. Chu·ªôt ph·∫£i v√†o PowerShell ‚Üí 'Run as Administrator'" -ForegroundColor White
    Write-Host "   3. Ch·∫°y l·∫°i script n√†y" -ForegroundColor White
    Write-Host ""
    
    $continue = Read-Host "B·∫°n c√≥ mu·ªën ti·∫øp t·ª•c kh√¥ng? (y/N)"
    if ($continue -ne "y" -and $continue -ne "Y") {
        Write-Host "ƒê√£ d·ª´ng script." -ForegroundColor Yellow
        exit 0
    }
}

# ===========================================
# MAIN SCRIPT
# ===========================================

Write-Host "=== T·∫†O FOLDER ICON H√ÄNG LO·∫†T CHO NHI·ªÄU TH∆Ø M·ª§C ===" -ForegroundColor Magenta

# Ki·ªÉm tra quy·ªÅn Administrator
if (-not (Test-Administrator)) {
    Request-AdminRights
}
Write-Host "Th∆∞ m·ª•c ch·ª©a icon: $IconFolder" -ForegroundColor White

# Function: S·ª≠a l·ªói quy·ªÅn truy c·∫≠p h√†ng lo·∫°t
function Fix-PermissionIssues {
    param([array]$RootFolders)
    
    Write-Host ""
    Write-Host "üîß C√îNG C·ª§ S·ª¨A L·ªñI QUY·ªÄN TRUY C·∫¨P" -ForegroundColor Cyan
    Write-Host "ƒêang qu√©t v√† s·ª≠a l·ªói desktop.ini trong c√°c th∆∞ m·ª•c..." -ForegroundColor White
    
    $fixedCount = 0
    $totalProcessed = 0
    
    foreach ($rootFolder in $RootFolders) {
        if (-not (Test-Path $rootFolder)) { continue }
        
        Write-Host ""
        Write-Host "üìÅ ƒêang x·ª≠ l√Ω: $rootFolder" -ForegroundColor Yellow
        
        $subFolders = Get-ChildItem -Path $rootFolder -Directory -ErrorAction SilentlyContinue
        
        foreach ($folder in $subFolders) {
            $totalProcessed++
            $desktopIniPath = Join-Path $folder.FullName "desktop.ini"
            
            if (Test-Path $desktopIniPath) {
                try {
                    # X√≥a t·∫•t c·∫£ thu·ªôc t√≠nh b·∫£o v·ªá
                    Start-Process -FilePath "attrib" -ArgumentList "-h -r -s `"$desktopIniPath`"" -NoNewWindow -Wait -ErrorAction SilentlyContinue
                    
                    # ƒê·∫∑t quy·ªÅn full control
                    $acl = Get-Acl $desktopIniPath
                    $accessRule = New-Object System.Security.AccessControl.FileSystemAccessRule($env:USERNAME, "FullControl", "Allow")
                    $acl.SetAccessRule($accessRule)
                    Set-Acl -Path $desktopIniPath -AclObject $acl -ErrorAction SilentlyContinue
                    
                    Write-Host "  ‚úî ƒê√£ s·ª≠a: $($folder.Name)" -ForegroundColor Green
                    $fixedCount++
                }
                catch {
                    Write-Host "  ‚úñ Kh√¥ng s·ª≠a ƒë∆∞·ª£c: $($folder.Name)" -ForegroundColor Red
                }
            }
        }
    }
    
    Write-Host ""
    Write-Host "üìä K·∫øt qu·∫£ s·ª≠a l·ªói:" -ForegroundColor White
    Write-Host "  ‚úî ƒê√£ s·ª≠a: $fixedCount" -ForegroundColor Green
    Write-Host "  üìÑ T·ªïng qu√©t: $totalProcessed" -ForegroundColor White
    
    if ($fixedCount -gt 0) {
        Write-Host ""
        Write-Host "üí° ƒê√£ s·ª≠a xong! B·∫°n c√≥ th·ªÉ ch·∫°y l·∫°i script ch√≠nh." -ForegroundColor Cyan
    }
}

Write-Host ""
Write-Host "S·∫Ω x·ª≠ l√Ω $($RootFolders.Count) th∆∞ m·ª•c g·ªëc:" -ForegroundColor White
foreach ($root in $RootFolders) {
    Write-Host "  üìÅ $root" -ForegroundColor Gray
}

# Ki·ªÉm tra th∆∞ m·ª•c icon
if (-not (Test-Path $IconFolder)) {
    Write-Host ""
    Write-Host "‚úñ Th∆∞ m·ª•c ch·ª©a icon kh√¥ng t·ªìn t·∫°i: $IconFolder" -ForegroundColor Red
    exit 1
}

# L·∫•y t·∫•t c·∫£ file .ico
$iconFiles = Get-ChildItem -Path $IconFolder -Filter "*.ico" -File

if ($iconFiles.Count -eq 0) {
    Write-Host ""
    Write-Host "‚úñ Kh√¥ng t√¨m th·∫•y file .ico n√†o trong th∆∞ m·ª•c: $IconFolder" -ForegroundColor Red
    exit 1
}

Write-Host ""
Write-Host "T√¨m th·∫•y $($iconFiles.Count) file icon (.ico)" -ForegroundColor White

# X√°c nh·∫≠n tr∆∞·ªõc khi b·∫Øt ƒë·∫ßu
if ($Interactive) {
    $confirm = Read-Host "`nB·∫°n c√≥ mu·ªën ti·∫øp t·ª•c? (y/N)"
    if ($confirm -ne "y" -and $confirm -ne "Y") {
        Write-Host "ƒê√£ h·ªßy thao t√°c." -ForegroundColor Yellow
        exit 0
    }
}

# B·ªô ƒë·∫øm t·ªïng
$totalStats = @{ New = 0; Updated = 0; Errors = 0 }

# Progress bar t·ªïng
if ($ShowProgress) {
    Write-Progress -Id 0 -Activity "X·ª≠ l√Ω t·∫•t c·∫£ th∆∞ m·ª•c g·ªëc" -Status "B·∫Øt ƒë·∫ßu..." -PercentComplete 0
}

# X·ª≠ l√Ω t·ª´ng th∆∞ m·ª•c g·ªëc
for ($rootIndex = 0; $rootIndex -lt $RootFolders.Count; $rootIndex++) {
    $rootFolder = $RootFolders[$rootIndex]
    
    if ($ShowProgress) {
        $percentComplete = [math]::Round(($rootIndex / $RootFolders.Count) * 100, 1)
        Write-Progress -Id 0 -Activity "X·ª≠ l√Ω t·∫•t c·∫£ th∆∞ m·ª•c g·ªëc" -Status "($($rootIndex + 1)/$($RootFolders.Count)) $rootFolder" -PercentComplete $percentComplete
    }
    
    # X·ª≠ l√Ω th∆∞ m·ª•c g·ªëc n√†y
    $stats = Process-RootFolder -RootPath $rootFolder -IconFiles $iconFiles -RootIndex $rootIndex -TotalRoots $RootFolders.Count
    
    # C·ªông d·ªìn th·ªëng k√™
    $totalStats.New += $stats.New
    $totalStats.Updated += $stats.Updated
    $totalStats.Errors += $stats.Errors
}

# X√≥a progress bar t·ªïng
if ($ShowProgress) {
    Write-Progress -Id 0 -Activity "X·ª≠ l√Ω t·∫•t c·∫£ th∆∞ m·ª•c g·ªëc" -Completed
}

# Hi·ªÉn th·ªã th·ªëng k√™ t·ªïng
Write-Host ""
Write-Host "=" * 80 -ForegroundColor Gray
Write-Host "=== TH·ªêNG K√ä T·ªîNG K·∫æT ===" -ForegroundColor Magenta
Write-Host "üèóÔ∏è  Th∆∞ m·ª•c g·ªëc ƒë√£ x·ª≠ l√Ω: $($RootFolders.Count)" -ForegroundColor White
Write-Host "üìÑ File icon ƒë√£ qu√©t: $($iconFiles.Count)" -ForegroundColor White
Write-Host "‚úîÔ∏è  Th∆∞ m·ª•c m·ªõi ƒë∆∞·ª£c t·∫°o: $($totalStats.New)" -ForegroundColor Green
Write-Host "üîÑ Th∆∞ m·ª•c ƒë∆∞·ª£c c·∫≠p nh·∫≠t: $($totalStats.Updated)" -ForegroundColor Cyan
if ($totalStats.Errors -gt 0) {
    Write-Host "‚ùå L·ªói x·∫£y ra: $($totalStats.Errors)" -ForegroundColor Red
}
Write-Host "üìä T·ªïng th∆∞ m·ª•c ƒë√£ x·ª≠ l√Ω: $($totalStats.New + $totalStats.Updated)" -ForegroundColor Yellow

# H·ªèi c√≥ mu·ªën m·ªü th∆∞ m·ª•c kh√¥ng
if ($Interactive -and $RootFolders.Count -le 3) {
    Write-Host ""
    Write-Host "B·∫°n c√≥ mu·ªën m·ªü c√°c th∆∞ m·ª•c k·∫øt qu·∫£ kh√¥ng? (y/N)" -ForegroundColor Yellow
    $openFolders = Read-Host
    if ($openFolders -eq "y" -or $openFolders -eq "Y") {
        foreach ($rootFolder in $RootFolders) {
            if (Test-Path $rootFolder) {
                try {
                    Start-Process explorer.exe -ArgumentList $rootFolder
                }
                catch {
                    Write-Host "Kh√¥ng th·ªÉ m·ªü th∆∞ m·ª•c: $rootFolder" -ForegroundColor Red
                }
            }
        }
    }
}

Write-Host ""
Write-Host "=== HO√ÄN TH√ÄNH T·∫§T C·∫¢ ===" -ForegroundColor Green
